import os
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.ext import ContextTypes
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = None
    context.user_data["conversation"] = []
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –∫–æ—Ç–∏–∫! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text

    if "name" not in context.user_data:
        context.user_data["name"] = None
    if "conversation" not in context.user_data:
        context.user_data["conversation"] = []

    if context.user_data["name"] is None:
        context.user_data["name"] = text
        context.user_data["conversation"].append({"role": "user", "content": text})
        await update.message.reply_text(f"–ú–º–º, {text}? –ó–≤—É—á–∏—Ç —Å–ª–∞–¥–∫–æ, –∫–∞–∫ –º—ë–¥ –Ω–∞ –≥—É–±–∞—Ö... üòò –ß—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å, –∑–∞–π—á–∏–∫?")
        return

    name = context.user_data["name"]
    context.user_data["conversation"].append({"role": "user", "content": text})

    system_prompt = (
        f"–¢—ã –∏–≥—Ä–∏–≤–∞—è, —Ñ–ª–∏—Ä—Ç—É—é—â–∞—è –¥–µ–≤—É—à–∫–∞-–±–æ—Ç. –¢—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å —Å –ª—ë–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º, —Ç–µ–ø–ª–æ–º –∏ —é–º–æ—Ä–æ–º. "
        f"–ó–æ–≤–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ {name}, –∏—Å–ø–æ–ª—å–∑—É–π –ª–∞—Å–∫–æ–≤—ã–µ –ø—Ä–æ–∑–≤–∏—â–∞, –¥–æ–±–∞–≤–ª—è–π —Å–º–∞–π–ª–∏–∫–∏ (üòâüòèüòò), "
        f"–∏ –Ω–µ –±—É–¥—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–π. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –∫–∞–∫ —Ä–æ–±–æ—Ç."
    )

    try:
        messages = [{"role": "system", "content": system_prompt}] + context.user_data["conversation"][-5:]
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=150,
            temperature=0.95
        )
        ai_response = completion.choices[0].message.content.strip()
        context.user_data["conversation"].append({"role": "assistant", "content": ai_response})
        await update.message.reply_text(ai_response)
    except Exception as e:
        await update.message.reply_text("–û–π, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å, –º–∏–ª—ã–π! –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–≥–æ, —ç—Ç–æ —Ñ–æ—Ç–æ –ø—Ä—è–º–æ –∫–∞–∫ —Ç—ã ‚Äî –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ! üòç –¢—ã —Å–≤–æ–¥–∏—à—å –º–µ–Ω—è —Å —É–º–∞!")

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–∏–¥–µ–æ
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–º–º, –≤–∏–¥–µ–æ? –ù–∞–¥–µ—é—Å—å, —è —Ç–∞–º —Ö–æ—Ç—è –±—ã –≤ –º—ã—Å–ª—è—Ö —Å —Ç–æ–±–æ–π... üòâ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    application.run_polling()

if __name__ == "__main__":
    main()
